
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `vehicles` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model vehicles
 * 
 */
export type vehiclesModel = runtime.Types.Result.DefaultSelection<Prisma.$vehiclesPayload>

export type AggregateVehicles = {
  _count: VehiclesCountAggregateOutputType | null
  _avg: VehiclesAvgAggregateOutputType | null
  _sum: VehiclesSumAggregateOutputType | null
  _min: VehiclesMinAggregateOutputType | null
  _max: VehiclesMaxAggregateOutputType | null
}

export type VehiclesAvgAggregateOutputType = {
  id: number | null
}

export type VehiclesSumAggregateOutputType = {
  id: number | null
}

export type VehiclesMinAggregateOutputType = {
  id: number | null
  plate_no: string | null
  model: string | null
  created_at: Date | null
}

export type VehiclesMaxAggregateOutputType = {
  id: number | null
  plate_no: string | null
  model: string | null
  created_at: Date | null
}

export type VehiclesCountAggregateOutputType = {
  id: number
  plate_no: number
  model: number
  created_at: number
  _all: number
}


export type VehiclesAvgAggregateInputType = {
  id?: true
}

export type VehiclesSumAggregateInputType = {
  id?: true
}

export type VehiclesMinAggregateInputType = {
  id?: true
  plate_no?: true
  model?: true
  created_at?: true
}

export type VehiclesMaxAggregateInputType = {
  id?: true
  plate_no?: true
  model?: true
  created_at?: true
}

export type VehiclesCountAggregateInputType = {
  id?: true
  plate_no?: true
  model?: true
  created_at?: true
  _all?: true
}

export type VehiclesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which vehicles to aggregate.
   */
  where?: Prisma.vehiclesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of vehicles to fetch.
   */
  orderBy?: Prisma.vehiclesOrderByWithRelationInput | Prisma.vehiclesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.vehiclesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` vehicles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` vehicles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned vehicles
  **/
  _count?: true | VehiclesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: VehiclesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: VehiclesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VehiclesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VehiclesMaxAggregateInputType
}

export type GetVehiclesAggregateType<T extends VehiclesAggregateArgs> = {
      [P in keyof T & keyof AggregateVehicles]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVehicles[P]>
    : Prisma.GetScalarType<T[P], AggregateVehicles[P]>
}




export type vehiclesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.vehiclesWhereInput
  orderBy?: Prisma.vehiclesOrderByWithAggregationInput | Prisma.vehiclesOrderByWithAggregationInput[]
  by: Prisma.VehiclesScalarFieldEnum[] | Prisma.VehiclesScalarFieldEnum
  having?: Prisma.vehiclesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VehiclesCountAggregateInputType | true
  _avg?: VehiclesAvgAggregateInputType
  _sum?: VehiclesSumAggregateInputType
  _min?: VehiclesMinAggregateInputType
  _max?: VehiclesMaxAggregateInputType
}

export type VehiclesGroupByOutputType = {
  id: number
  plate_no: string
  model: string | null
  created_at: Date | null
  _count: VehiclesCountAggregateOutputType | null
  _avg: VehiclesAvgAggregateOutputType | null
  _sum: VehiclesSumAggregateOutputType | null
  _min: VehiclesMinAggregateOutputType | null
  _max: VehiclesMaxAggregateOutputType | null
}

type GetVehiclesGroupByPayload<T extends vehiclesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VehiclesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VehiclesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VehiclesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VehiclesGroupByOutputType[P]>
      }
    >
  > 



export type vehiclesWhereInput = {
  AND?: Prisma.vehiclesWhereInput | Prisma.vehiclesWhereInput[]
  OR?: Prisma.vehiclesWhereInput[]
  NOT?: Prisma.vehiclesWhereInput | Prisma.vehiclesWhereInput[]
  id?: Prisma.IntFilter<"vehicles"> | number
  plate_no?: Prisma.StringFilter<"vehicles"> | string
  model?: Prisma.StringNullableFilter<"vehicles"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"vehicles"> | Date | string | null
  trips?: Prisma.TripsListRelationFilter
}

export type vehiclesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  plate_no?: Prisma.SortOrder
  model?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  trips?: Prisma.tripsOrderByRelationAggregateInput
}

export type vehiclesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  plate_no?: string
  AND?: Prisma.vehiclesWhereInput | Prisma.vehiclesWhereInput[]
  OR?: Prisma.vehiclesWhereInput[]
  NOT?: Prisma.vehiclesWhereInput | Prisma.vehiclesWhereInput[]
  model?: Prisma.StringNullableFilter<"vehicles"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"vehicles"> | Date | string | null
  trips?: Prisma.TripsListRelationFilter
}, "id" | "plate_no">

export type vehiclesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  plate_no?: Prisma.SortOrder
  model?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.vehiclesCountOrderByAggregateInput
  _avg?: Prisma.vehiclesAvgOrderByAggregateInput
  _max?: Prisma.vehiclesMaxOrderByAggregateInput
  _min?: Prisma.vehiclesMinOrderByAggregateInput
  _sum?: Prisma.vehiclesSumOrderByAggregateInput
}

export type vehiclesScalarWhereWithAggregatesInput = {
  AND?: Prisma.vehiclesScalarWhereWithAggregatesInput | Prisma.vehiclesScalarWhereWithAggregatesInput[]
  OR?: Prisma.vehiclesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.vehiclesScalarWhereWithAggregatesInput | Prisma.vehiclesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"vehicles"> | number
  plate_no?: Prisma.StringWithAggregatesFilter<"vehicles"> | string
  model?: Prisma.StringNullableWithAggregatesFilter<"vehicles"> | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"vehicles"> | Date | string | null
}

export type vehiclesCreateInput = {
  plate_no: string
  model?: string | null
  created_at?: Date | string | null
  trips?: Prisma.tripsCreateNestedManyWithoutVehiclesInput
}

export type vehiclesUncheckedCreateInput = {
  id?: number
  plate_no: string
  model?: string | null
  created_at?: Date | string | null
  trips?: Prisma.tripsUncheckedCreateNestedManyWithoutVehiclesInput
}

export type vehiclesUpdateInput = {
  plate_no?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trips?: Prisma.tripsUpdateManyWithoutVehiclesNestedInput
}

export type vehiclesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  plate_no?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trips?: Prisma.tripsUncheckedUpdateManyWithoutVehiclesNestedInput
}

export type vehiclesCreateManyInput = {
  id?: number
  plate_no: string
  model?: string | null
  created_at?: Date | string | null
}

export type vehiclesUpdateManyMutationInput = {
  plate_no?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type vehiclesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  plate_no?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type VehiclesScalarRelationFilter = {
  is?: Prisma.vehiclesWhereInput
  isNot?: Prisma.vehiclesWhereInput
}

export type vehiclesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  plate_no?: Prisma.SortOrder
  model?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type vehiclesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type vehiclesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  plate_no?: Prisma.SortOrder
  model?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type vehiclesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  plate_no?: Prisma.SortOrder
  model?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type vehiclesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type vehiclesCreateNestedOneWithoutTripsInput = {
  create?: Prisma.XOR<Prisma.vehiclesCreateWithoutTripsInput, Prisma.vehiclesUncheckedCreateWithoutTripsInput>
  connectOrCreate?: Prisma.vehiclesCreateOrConnectWithoutTripsInput
  connect?: Prisma.vehiclesWhereUniqueInput
}

export type vehiclesUpdateOneRequiredWithoutTripsNestedInput = {
  create?: Prisma.XOR<Prisma.vehiclesCreateWithoutTripsInput, Prisma.vehiclesUncheckedCreateWithoutTripsInput>
  connectOrCreate?: Prisma.vehiclesCreateOrConnectWithoutTripsInput
  upsert?: Prisma.vehiclesUpsertWithoutTripsInput
  connect?: Prisma.vehiclesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.vehiclesUpdateToOneWithWhereWithoutTripsInput, Prisma.vehiclesUpdateWithoutTripsInput>, Prisma.vehiclesUncheckedUpdateWithoutTripsInput>
}

export type vehiclesCreateWithoutTripsInput = {
  plate_no: string
  model?: string | null
  created_at?: Date | string | null
}

export type vehiclesUncheckedCreateWithoutTripsInput = {
  id?: number
  plate_no: string
  model?: string | null
  created_at?: Date | string | null
}

export type vehiclesCreateOrConnectWithoutTripsInput = {
  where: Prisma.vehiclesWhereUniqueInput
  create: Prisma.XOR<Prisma.vehiclesCreateWithoutTripsInput, Prisma.vehiclesUncheckedCreateWithoutTripsInput>
}

export type vehiclesUpsertWithoutTripsInput = {
  update: Prisma.XOR<Prisma.vehiclesUpdateWithoutTripsInput, Prisma.vehiclesUncheckedUpdateWithoutTripsInput>
  create: Prisma.XOR<Prisma.vehiclesCreateWithoutTripsInput, Prisma.vehiclesUncheckedCreateWithoutTripsInput>
  where?: Prisma.vehiclesWhereInput
}

export type vehiclesUpdateToOneWithWhereWithoutTripsInput = {
  where?: Prisma.vehiclesWhereInput
  data: Prisma.XOR<Prisma.vehiclesUpdateWithoutTripsInput, Prisma.vehiclesUncheckedUpdateWithoutTripsInput>
}

export type vehiclesUpdateWithoutTripsInput = {
  plate_no?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type vehiclesUncheckedUpdateWithoutTripsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  plate_no?: Prisma.StringFieldUpdateOperationsInput | string
  model?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type VehiclesCountOutputType
 */

export type VehiclesCountOutputType = {
  trips: number
}

export type VehiclesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trips?: boolean | VehiclesCountOutputTypeCountTripsArgs
}

/**
 * VehiclesCountOutputType without action
 */
export type VehiclesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VehiclesCountOutputType
   */
  select?: Prisma.VehiclesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * VehiclesCountOutputType without action
 */
export type VehiclesCountOutputTypeCountTripsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tripsWhereInput
}


export type vehiclesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  plate_no?: boolean
  model?: boolean
  created_at?: boolean
  trips?: boolean | Prisma.vehicles$tripsArgs<ExtArgs>
  _count?: boolean | Prisma.VehiclesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["vehicles"]>

export type vehiclesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  plate_no?: boolean
  model?: boolean
  created_at?: boolean
}, ExtArgs["result"]["vehicles"]>

export type vehiclesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  plate_no?: boolean
  model?: boolean
  created_at?: boolean
}, ExtArgs["result"]["vehicles"]>

export type vehiclesSelectScalar = {
  id?: boolean
  plate_no?: boolean
  model?: boolean
  created_at?: boolean
}

export type vehiclesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "plate_no" | "model" | "created_at", ExtArgs["result"]["vehicles"]>
export type vehiclesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trips?: boolean | Prisma.vehicles$tripsArgs<ExtArgs>
  _count?: boolean | Prisma.VehiclesCountOutputTypeDefaultArgs<ExtArgs>
}
export type vehiclesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type vehiclesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $vehiclesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "vehicles"
  objects: {
    trips: Prisma.$tripsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    plate_no: string
    model: string | null
    created_at: Date | null
  }, ExtArgs["result"]["vehicles"]>
  composites: {}
}

export type vehiclesGetPayload<S extends boolean | null | undefined | vehiclesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$vehiclesPayload, S>

export type vehiclesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<vehiclesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VehiclesCountAggregateInputType | true
  }

export interface vehiclesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['vehicles'], meta: { name: 'vehicles' } }
  /**
   * Find zero or one Vehicles that matches the filter.
   * @param {vehiclesFindUniqueArgs} args - Arguments to find a Vehicles
   * @example
   * // Get one Vehicles
   * const vehicles = await prisma.vehicles.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends vehiclesFindUniqueArgs>(args: Prisma.SelectSubset<T, vehiclesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__vehiclesClient<runtime.Types.Result.GetResult<Prisma.$vehiclesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Vehicles that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {vehiclesFindUniqueOrThrowArgs} args - Arguments to find a Vehicles
   * @example
   * // Get one Vehicles
   * const vehicles = await prisma.vehicles.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends vehiclesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, vehiclesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__vehiclesClient<runtime.Types.Result.GetResult<Prisma.$vehiclesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Vehicles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {vehiclesFindFirstArgs} args - Arguments to find a Vehicles
   * @example
   * // Get one Vehicles
   * const vehicles = await prisma.vehicles.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends vehiclesFindFirstArgs>(args?: Prisma.SelectSubset<T, vehiclesFindFirstArgs<ExtArgs>>): Prisma.Prisma__vehiclesClient<runtime.Types.Result.GetResult<Prisma.$vehiclesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Vehicles that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {vehiclesFindFirstOrThrowArgs} args - Arguments to find a Vehicles
   * @example
   * // Get one Vehicles
   * const vehicles = await prisma.vehicles.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends vehiclesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, vehiclesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__vehiclesClient<runtime.Types.Result.GetResult<Prisma.$vehiclesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Vehicles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {vehiclesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Vehicles
   * const vehicles = await prisma.vehicles.findMany()
   * 
   * // Get first 10 Vehicles
   * const vehicles = await prisma.vehicles.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const vehiclesWithIdOnly = await prisma.vehicles.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends vehiclesFindManyArgs>(args?: Prisma.SelectSubset<T, vehiclesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$vehiclesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Vehicles.
   * @param {vehiclesCreateArgs} args - Arguments to create a Vehicles.
   * @example
   * // Create one Vehicles
   * const Vehicles = await prisma.vehicles.create({
   *   data: {
   *     // ... data to create a Vehicles
   *   }
   * })
   * 
   */
  create<T extends vehiclesCreateArgs>(args: Prisma.SelectSubset<T, vehiclesCreateArgs<ExtArgs>>): Prisma.Prisma__vehiclesClient<runtime.Types.Result.GetResult<Prisma.$vehiclesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Vehicles.
   * @param {vehiclesCreateManyArgs} args - Arguments to create many Vehicles.
   * @example
   * // Create many Vehicles
   * const vehicles = await prisma.vehicles.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends vehiclesCreateManyArgs>(args?: Prisma.SelectSubset<T, vehiclesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Vehicles and returns the data saved in the database.
   * @param {vehiclesCreateManyAndReturnArgs} args - Arguments to create many Vehicles.
   * @example
   * // Create many Vehicles
   * const vehicles = await prisma.vehicles.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Vehicles and only return the `id`
   * const vehiclesWithIdOnly = await prisma.vehicles.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends vehiclesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, vehiclesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$vehiclesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Vehicles.
   * @param {vehiclesDeleteArgs} args - Arguments to delete one Vehicles.
   * @example
   * // Delete one Vehicles
   * const Vehicles = await prisma.vehicles.delete({
   *   where: {
   *     // ... filter to delete one Vehicles
   *   }
   * })
   * 
   */
  delete<T extends vehiclesDeleteArgs>(args: Prisma.SelectSubset<T, vehiclesDeleteArgs<ExtArgs>>): Prisma.Prisma__vehiclesClient<runtime.Types.Result.GetResult<Prisma.$vehiclesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Vehicles.
   * @param {vehiclesUpdateArgs} args - Arguments to update one Vehicles.
   * @example
   * // Update one Vehicles
   * const vehicles = await prisma.vehicles.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends vehiclesUpdateArgs>(args: Prisma.SelectSubset<T, vehiclesUpdateArgs<ExtArgs>>): Prisma.Prisma__vehiclesClient<runtime.Types.Result.GetResult<Prisma.$vehiclesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Vehicles.
   * @param {vehiclesDeleteManyArgs} args - Arguments to filter Vehicles to delete.
   * @example
   * // Delete a few Vehicles
   * const { count } = await prisma.vehicles.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends vehiclesDeleteManyArgs>(args?: Prisma.SelectSubset<T, vehiclesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Vehicles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {vehiclesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Vehicles
   * const vehicles = await prisma.vehicles.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends vehiclesUpdateManyArgs>(args: Prisma.SelectSubset<T, vehiclesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Vehicles and returns the data updated in the database.
   * @param {vehiclesUpdateManyAndReturnArgs} args - Arguments to update many Vehicles.
   * @example
   * // Update many Vehicles
   * const vehicles = await prisma.vehicles.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Vehicles and only return the `id`
   * const vehiclesWithIdOnly = await prisma.vehicles.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends vehiclesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, vehiclesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$vehiclesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Vehicles.
   * @param {vehiclesUpsertArgs} args - Arguments to update or create a Vehicles.
   * @example
   * // Update or create a Vehicles
   * const vehicles = await prisma.vehicles.upsert({
   *   create: {
   *     // ... data to create a Vehicles
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Vehicles we want to update
   *   }
   * })
   */
  upsert<T extends vehiclesUpsertArgs>(args: Prisma.SelectSubset<T, vehiclesUpsertArgs<ExtArgs>>): Prisma.Prisma__vehiclesClient<runtime.Types.Result.GetResult<Prisma.$vehiclesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Vehicles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {vehiclesCountArgs} args - Arguments to filter Vehicles to count.
   * @example
   * // Count the number of Vehicles
   * const count = await prisma.vehicles.count({
   *   where: {
   *     // ... the filter for the Vehicles we want to count
   *   }
   * })
  **/
  count<T extends vehiclesCountArgs>(
    args?: Prisma.Subset<T, vehiclesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VehiclesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Vehicles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehiclesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VehiclesAggregateArgs>(args: Prisma.Subset<T, VehiclesAggregateArgs>): Prisma.PrismaPromise<GetVehiclesAggregateType<T>>

  /**
   * Group by Vehicles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {vehiclesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends vehiclesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: vehiclesGroupByArgs['orderBy'] }
      : { orderBy?: vehiclesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, vehiclesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVehiclesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the vehicles model
 */
readonly fields: vehiclesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for vehicles.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__vehiclesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  trips<T extends Prisma.vehicles$tripsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.vehicles$tripsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tripsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the vehicles model
 */
export interface vehiclesFieldRefs {
  readonly id: Prisma.FieldRef<"vehicles", 'Int'>
  readonly plate_no: Prisma.FieldRef<"vehicles", 'String'>
  readonly model: Prisma.FieldRef<"vehicles", 'String'>
  readonly created_at: Prisma.FieldRef<"vehicles", 'DateTime'>
}
    

// Custom InputTypes
/**
 * vehicles findUnique
 */
export type vehiclesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclesInclude<ExtArgs> | null
  /**
   * Filter, which vehicles to fetch.
   */
  where: Prisma.vehiclesWhereUniqueInput
}

/**
 * vehicles findUniqueOrThrow
 */
export type vehiclesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclesInclude<ExtArgs> | null
  /**
   * Filter, which vehicles to fetch.
   */
  where: Prisma.vehiclesWhereUniqueInput
}

/**
 * vehicles findFirst
 */
export type vehiclesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclesInclude<ExtArgs> | null
  /**
   * Filter, which vehicles to fetch.
   */
  where?: Prisma.vehiclesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of vehicles to fetch.
   */
  orderBy?: Prisma.vehiclesOrderByWithRelationInput | Prisma.vehiclesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for vehicles.
   */
  cursor?: Prisma.vehiclesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` vehicles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` vehicles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of vehicles.
   */
  distinct?: Prisma.VehiclesScalarFieldEnum | Prisma.VehiclesScalarFieldEnum[]
}

/**
 * vehicles findFirstOrThrow
 */
export type vehiclesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclesInclude<ExtArgs> | null
  /**
   * Filter, which vehicles to fetch.
   */
  where?: Prisma.vehiclesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of vehicles to fetch.
   */
  orderBy?: Prisma.vehiclesOrderByWithRelationInput | Prisma.vehiclesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for vehicles.
   */
  cursor?: Prisma.vehiclesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` vehicles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` vehicles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of vehicles.
   */
  distinct?: Prisma.VehiclesScalarFieldEnum | Prisma.VehiclesScalarFieldEnum[]
}

/**
 * vehicles findMany
 */
export type vehiclesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclesInclude<ExtArgs> | null
  /**
   * Filter, which vehicles to fetch.
   */
  where?: Prisma.vehiclesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of vehicles to fetch.
   */
  orderBy?: Prisma.vehiclesOrderByWithRelationInput | Prisma.vehiclesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing vehicles.
   */
  cursor?: Prisma.vehiclesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` vehicles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` vehicles.
   */
  skip?: number
  distinct?: Prisma.VehiclesScalarFieldEnum | Prisma.VehiclesScalarFieldEnum[]
}

/**
 * vehicles create
 */
export type vehiclesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclesInclude<ExtArgs> | null
  /**
   * The data needed to create a vehicles.
   */
  data: Prisma.XOR<Prisma.vehiclesCreateInput, Prisma.vehiclesUncheckedCreateInput>
}

/**
 * vehicles createMany
 */
export type vehiclesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many vehicles.
   */
  data: Prisma.vehiclesCreateManyInput | Prisma.vehiclesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * vehicles createManyAndReturn
 */
export type vehiclesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * The data used to create many vehicles.
   */
  data: Prisma.vehiclesCreateManyInput | Prisma.vehiclesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * vehicles update
 */
export type vehiclesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclesInclude<ExtArgs> | null
  /**
   * The data needed to update a vehicles.
   */
  data: Prisma.XOR<Prisma.vehiclesUpdateInput, Prisma.vehiclesUncheckedUpdateInput>
  /**
   * Choose, which vehicles to update.
   */
  where: Prisma.vehiclesWhereUniqueInput
}

/**
 * vehicles updateMany
 */
export type vehiclesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update vehicles.
   */
  data: Prisma.XOR<Prisma.vehiclesUpdateManyMutationInput, Prisma.vehiclesUncheckedUpdateManyInput>
  /**
   * Filter which vehicles to update
   */
  where?: Prisma.vehiclesWhereInput
  /**
   * Limit how many vehicles to update.
   */
  limit?: number
}

/**
 * vehicles updateManyAndReturn
 */
export type vehiclesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * The data used to update vehicles.
   */
  data: Prisma.XOR<Prisma.vehiclesUpdateManyMutationInput, Prisma.vehiclesUncheckedUpdateManyInput>
  /**
   * Filter which vehicles to update
   */
  where?: Prisma.vehiclesWhereInput
  /**
   * Limit how many vehicles to update.
   */
  limit?: number
}

/**
 * vehicles upsert
 */
export type vehiclesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclesInclude<ExtArgs> | null
  /**
   * The filter to search for the vehicles to update in case it exists.
   */
  where: Prisma.vehiclesWhereUniqueInput
  /**
   * In case the vehicles found by the `where` argument doesn't exist, create a new vehicles with this data.
   */
  create: Prisma.XOR<Prisma.vehiclesCreateInput, Prisma.vehiclesUncheckedCreateInput>
  /**
   * In case the vehicles was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.vehiclesUpdateInput, Prisma.vehiclesUncheckedUpdateInput>
}

/**
 * vehicles delete
 */
export type vehiclesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclesInclude<ExtArgs> | null
  /**
   * Filter which vehicles to delete.
   */
  where: Prisma.vehiclesWhereUniqueInput
}

/**
 * vehicles deleteMany
 */
export type vehiclesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which vehicles to delete
   */
  where?: Prisma.vehiclesWhereInput
  /**
   * Limit how many vehicles to delete.
   */
  limit?: number
}

/**
 * vehicles.trips
 */
export type vehicles$tripsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trips
   */
  select?: Prisma.tripsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trips
   */
  omit?: Prisma.tripsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tripsInclude<ExtArgs> | null
  where?: Prisma.tripsWhereInput
  orderBy?: Prisma.tripsOrderByWithRelationInput | Prisma.tripsOrderByWithRelationInput[]
  cursor?: Prisma.tripsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TripsScalarFieldEnum | Prisma.TripsScalarFieldEnum[]
}

/**
 * vehicles without action
 */
export type vehiclesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehicles
   */
  select?: Prisma.vehiclesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehicles
   */
  omit?: Prisma.vehiclesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclesInclude<ExtArgs> | null
}
