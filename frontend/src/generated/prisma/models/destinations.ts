
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `destinations` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model destinations
 * 
 */
export type destinationsModel = runtime.Types.Result.DefaultSelection<Prisma.$destinationsPayload>

export type AggregateDestinations = {
  _count: DestinationsCountAggregateOutputType | null
  _avg: DestinationsAvgAggregateOutputType | null
  _sum: DestinationsSumAggregateOutputType | null
  _min: DestinationsMinAggregateOutputType | null
  _max: DestinationsMaxAggregateOutputType | null
}

export type DestinationsAvgAggregateOutputType = {
  id: number | null
}

export type DestinationsSumAggregateOutputType = {
  id: number | null
}

export type DestinationsMinAggregateOutputType = {
  id: number | null
  name: string | null
  address: string | null
}

export type DestinationsMaxAggregateOutputType = {
  id: number | null
  name: string | null
  address: string | null
}

export type DestinationsCountAggregateOutputType = {
  id: number
  name: number
  address: number
  _all: number
}


export type DestinationsAvgAggregateInputType = {
  id?: true
}

export type DestinationsSumAggregateInputType = {
  id?: true
}

export type DestinationsMinAggregateInputType = {
  id?: true
  name?: true
  address?: true
}

export type DestinationsMaxAggregateInputType = {
  id?: true
  name?: true
  address?: true
}

export type DestinationsCountAggregateInputType = {
  id?: true
  name?: true
  address?: true
  _all?: true
}

export type DestinationsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which destinations to aggregate.
   */
  where?: Prisma.destinationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of destinations to fetch.
   */
  orderBy?: Prisma.destinationsOrderByWithRelationInput | Prisma.destinationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.destinationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` destinations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` destinations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned destinations
  **/
  _count?: true | DestinationsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DestinationsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DestinationsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DestinationsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DestinationsMaxAggregateInputType
}

export type GetDestinationsAggregateType<T extends DestinationsAggregateArgs> = {
      [P in keyof T & keyof AggregateDestinations]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDestinations[P]>
    : Prisma.GetScalarType<T[P], AggregateDestinations[P]>
}




export type destinationsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.destinationsWhereInput
  orderBy?: Prisma.destinationsOrderByWithAggregationInput | Prisma.destinationsOrderByWithAggregationInput[]
  by: Prisma.DestinationsScalarFieldEnum[] | Prisma.DestinationsScalarFieldEnum
  having?: Prisma.destinationsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DestinationsCountAggregateInputType | true
  _avg?: DestinationsAvgAggregateInputType
  _sum?: DestinationsSumAggregateInputType
  _min?: DestinationsMinAggregateInputType
  _max?: DestinationsMaxAggregateInputType
}

export type DestinationsGroupByOutputType = {
  id: number
  name: string
  address: string | null
  _count: DestinationsCountAggregateOutputType | null
  _avg: DestinationsAvgAggregateOutputType | null
  _sum: DestinationsSumAggregateOutputType | null
  _min: DestinationsMinAggregateOutputType | null
  _max: DestinationsMaxAggregateOutputType | null
}

type GetDestinationsGroupByPayload<T extends destinationsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DestinationsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DestinationsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DestinationsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DestinationsGroupByOutputType[P]>
      }
    >
  > 



export type destinationsWhereInput = {
  AND?: Prisma.destinationsWhereInput | Prisma.destinationsWhereInput[]
  OR?: Prisma.destinationsWhereInput[]
  NOT?: Prisma.destinationsWhereInput | Prisma.destinationsWhereInput[]
  id?: Prisma.IntFilter<"destinations"> | number
  name?: Prisma.StringFilter<"destinations"> | string
  address?: Prisma.StringNullableFilter<"destinations"> | string | null
  trips_trips_end_destination_idTodestinations?: Prisma.TripsListRelationFilter
  trips_trips_start_destination_idTodestinations?: Prisma.TripsListRelationFilter
}

export type destinationsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  trips_trips_end_destination_idTodestinations?: Prisma.tripsOrderByRelationAggregateInput
  trips_trips_start_destination_idTodestinations?: Prisma.tripsOrderByRelationAggregateInput
}

export type destinationsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.destinationsWhereInput | Prisma.destinationsWhereInput[]
  OR?: Prisma.destinationsWhereInput[]
  NOT?: Prisma.destinationsWhereInput | Prisma.destinationsWhereInput[]
  address?: Prisma.StringNullableFilter<"destinations"> | string | null
  trips_trips_end_destination_idTodestinations?: Prisma.TripsListRelationFilter
  trips_trips_start_destination_idTodestinations?: Prisma.TripsListRelationFilter
}, "id" | "name">

export type destinationsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.destinationsCountOrderByAggregateInput
  _avg?: Prisma.destinationsAvgOrderByAggregateInput
  _max?: Prisma.destinationsMaxOrderByAggregateInput
  _min?: Prisma.destinationsMinOrderByAggregateInput
  _sum?: Prisma.destinationsSumOrderByAggregateInput
}

export type destinationsScalarWhereWithAggregatesInput = {
  AND?: Prisma.destinationsScalarWhereWithAggregatesInput | Prisma.destinationsScalarWhereWithAggregatesInput[]
  OR?: Prisma.destinationsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.destinationsScalarWhereWithAggregatesInput | Prisma.destinationsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"destinations"> | number
  name?: Prisma.StringWithAggregatesFilter<"destinations"> | string
  address?: Prisma.StringNullableWithAggregatesFilter<"destinations"> | string | null
}

export type destinationsCreateInput = {
  name: string
  address?: string | null
  trips_trips_end_destination_idTodestinations?: Prisma.tripsCreateNestedManyWithoutDestinations_trips_end_destination_idTodestinationsInput
  trips_trips_start_destination_idTodestinations?: Prisma.tripsCreateNestedManyWithoutDestinations_trips_start_destination_idTodestinationsInput
}

export type destinationsUncheckedCreateInput = {
  id?: number
  name: string
  address?: string | null
  trips_trips_end_destination_idTodestinations?: Prisma.tripsUncheckedCreateNestedManyWithoutDestinations_trips_end_destination_idTodestinationsInput
  trips_trips_start_destination_idTodestinations?: Prisma.tripsUncheckedCreateNestedManyWithoutDestinations_trips_start_destination_idTodestinationsInput
}

export type destinationsUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trips_trips_end_destination_idTodestinations?: Prisma.tripsUpdateManyWithoutDestinations_trips_end_destination_idTodestinationsNestedInput
  trips_trips_start_destination_idTodestinations?: Prisma.tripsUpdateManyWithoutDestinations_trips_start_destination_idTodestinationsNestedInput
}

export type destinationsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trips_trips_end_destination_idTodestinations?: Prisma.tripsUncheckedUpdateManyWithoutDestinations_trips_end_destination_idTodestinationsNestedInput
  trips_trips_start_destination_idTodestinations?: Prisma.tripsUncheckedUpdateManyWithoutDestinations_trips_start_destination_idTodestinationsNestedInput
}

export type destinationsCreateManyInput = {
  id?: number
  name: string
  address?: string | null
}

export type destinationsUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type destinationsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type destinationsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
}

export type destinationsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type destinationsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
}

export type destinationsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
}

export type destinationsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type DestinationsScalarRelationFilter = {
  is?: Prisma.destinationsWhereInput
  isNot?: Prisma.destinationsWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type destinationsCreateNestedOneWithoutTrips_trips_end_destination_idTodestinationsInput = {
  create?: Prisma.XOR<Prisma.destinationsCreateWithoutTrips_trips_end_destination_idTodestinationsInput, Prisma.destinationsUncheckedCreateWithoutTrips_trips_end_destination_idTodestinationsInput>
  connectOrCreate?: Prisma.destinationsCreateOrConnectWithoutTrips_trips_end_destination_idTodestinationsInput
  connect?: Prisma.destinationsWhereUniqueInput
}

export type destinationsCreateNestedOneWithoutTrips_trips_start_destination_idTodestinationsInput = {
  create?: Prisma.XOR<Prisma.destinationsCreateWithoutTrips_trips_start_destination_idTodestinationsInput, Prisma.destinationsUncheckedCreateWithoutTrips_trips_start_destination_idTodestinationsInput>
  connectOrCreate?: Prisma.destinationsCreateOrConnectWithoutTrips_trips_start_destination_idTodestinationsInput
  connect?: Prisma.destinationsWhereUniqueInput
}

export type destinationsUpdateOneRequiredWithoutTrips_trips_end_destination_idTodestinationsNestedInput = {
  create?: Prisma.XOR<Prisma.destinationsCreateWithoutTrips_trips_end_destination_idTodestinationsInput, Prisma.destinationsUncheckedCreateWithoutTrips_trips_end_destination_idTodestinationsInput>
  connectOrCreate?: Prisma.destinationsCreateOrConnectWithoutTrips_trips_end_destination_idTodestinationsInput
  upsert?: Prisma.destinationsUpsertWithoutTrips_trips_end_destination_idTodestinationsInput
  connect?: Prisma.destinationsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.destinationsUpdateToOneWithWhereWithoutTrips_trips_end_destination_idTodestinationsInput, Prisma.destinationsUpdateWithoutTrips_trips_end_destination_idTodestinationsInput>, Prisma.destinationsUncheckedUpdateWithoutTrips_trips_end_destination_idTodestinationsInput>
}

export type destinationsUpdateOneRequiredWithoutTrips_trips_start_destination_idTodestinationsNestedInput = {
  create?: Prisma.XOR<Prisma.destinationsCreateWithoutTrips_trips_start_destination_idTodestinationsInput, Prisma.destinationsUncheckedCreateWithoutTrips_trips_start_destination_idTodestinationsInput>
  connectOrCreate?: Prisma.destinationsCreateOrConnectWithoutTrips_trips_start_destination_idTodestinationsInput
  upsert?: Prisma.destinationsUpsertWithoutTrips_trips_start_destination_idTodestinationsInput
  connect?: Prisma.destinationsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.destinationsUpdateToOneWithWhereWithoutTrips_trips_start_destination_idTodestinationsInput, Prisma.destinationsUpdateWithoutTrips_trips_start_destination_idTodestinationsInput>, Prisma.destinationsUncheckedUpdateWithoutTrips_trips_start_destination_idTodestinationsInput>
}

export type destinationsCreateWithoutTrips_trips_end_destination_idTodestinationsInput = {
  name: string
  address?: string | null
  trips_trips_start_destination_idTodestinations?: Prisma.tripsCreateNestedManyWithoutDestinations_trips_start_destination_idTodestinationsInput
}

export type destinationsUncheckedCreateWithoutTrips_trips_end_destination_idTodestinationsInput = {
  id?: number
  name: string
  address?: string | null
  trips_trips_start_destination_idTodestinations?: Prisma.tripsUncheckedCreateNestedManyWithoutDestinations_trips_start_destination_idTodestinationsInput
}

export type destinationsCreateOrConnectWithoutTrips_trips_end_destination_idTodestinationsInput = {
  where: Prisma.destinationsWhereUniqueInput
  create: Prisma.XOR<Prisma.destinationsCreateWithoutTrips_trips_end_destination_idTodestinationsInput, Prisma.destinationsUncheckedCreateWithoutTrips_trips_end_destination_idTodestinationsInput>
}

export type destinationsCreateWithoutTrips_trips_start_destination_idTodestinationsInput = {
  name: string
  address?: string | null
  trips_trips_end_destination_idTodestinations?: Prisma.tripsCreateNestedManyWithoutDestinations_trips_end_destination_idTodestinationsInput
}

export type destinationsUncheckedCreateWithoutTrips_trips_start_destination_idTodestinationsInput = {
  id?: number
  name: string
  address?: string | null
  trips_trips_end_destination_idTodestinations?: Prisma.tripsUncheckedCreateNestedManyWithoutDestinations_trips_end_destination_idTodestinationsInput
}

export type destinationsCreateOrConnectWithoutTrips_trips_start_destination_idTodestinationsInput = {
  where: Prisma.destinationsWhereUniqueInput
  create: Prisma.XOR<Prisma.destinationsCreateWithoutTrips_trips_start_destination_idTodestinationsInput, Prisma.destinationsUncheckedCreateWithoutTrips_trips_start_destination_idTodestinationsInput>
}

export type destinationsUpsertWithoutTrips_trips_end_destination_idTodestinationsInput = {
  update: Prisma.XOR<Prisma.destinationsUpdateWithoutTrips_trips_end_destination_idTodestinationsInput, Prisma.destinationsUncheckedUpdateWithoutTrips_trips_end_destination_idTodestinationsInput>
  create: Prisma.XOR<Prisma.destinationsCreateWithoutTrips_trips_end_destination_idTodestinationsInput, Prisma.destinationsUncheckedCreateWithoutTrips_trips_end_destination_idTodestinationsInput>
  where?: Prisma.destinationsWhereInput
}

export type destinationsUpdateToOneWithWhereWithoutTrips_trips_end_destination_idTodestinationsInput = {
  where?: Prisma.destinationsWhereInput
  data: Prisma.XOR<Prisma.destinationsUpdateWithoutTrips_trips_end_destination_idTodestinationsInput, Prisma.destinationsUncheckedUpdateWithoutTrips_trips_end_destination_idTodestinationsInput>
}

export type destinationsUpdateWithoutTrips_trips_end_destination_idTodestinationsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trips_trips_start_destination_idTodestinations?: Prisma.tripsUpdateManyWithoutDestinations_trips_start_destination_idTodestinationsNestedInput
}

export type destinationsUncheckedUpdateWithoutTrips_trips_end_destination_idTodestinationsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trips_trips_start_destination_idTodestinations?: Prisma.tripsUncheckedUpdateManyWithoutDestinations_trips_start_destination_idTodestinationsNestedInput
}

export type destinationsUpsertWithoutTrips_trips_start_destination_idTodestinationsInput = {
  update: Prisma.XOR<Prisma.destinationsUpdateWithoutTrips_trips_start_destination_idTodestinationsInput, Prisma.destinationsUncheckedUpdateWithoutTrips_trips_start_destination_idTodestinationsInput>
  create: Prisma.XOR<Prisma.destinationsCreateWithoutTrips_trips_start_destination_idTodestinationsInput, Prisma.destinationsUncheckedCreateWithoutTrips_trips_start_destination_idTodestinationsInput>
  where?: Prisma.destinationsWhereInput
}

export type destinationsUpdateToOneWithWhereWithoutTrips_trips_start_destination_idTodestinationsInput = {
  where?: Prisma.destinationsWhereInput
  data: Prisma.XOR<Prisma.destinationsUpdateWithoutTrips_trips_start_destination_idTodestinationsInput, Prisma.destinationsUncheckedUpdateWithoutTrips_trips_start_destination_idTodestinationsInput>
}

export type destinationsUpdateWithoutTrips_trips_start_destination_idTodestinationsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trips_trips_end_destination_idTodestinations?: Prisma.tripsUpdateManyWithoutDestinations_trips_end_destination_idTodestinationsNestedInput
}

export type destinationsUncheckedUpdateWithoutTrips_trips_start_destination_idTodestinationsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  trips_trips_end_destination_idTodestinations?: Prisma.tripsUncheckedUpdateManyWithoutDestinations_trips_end_destination_idTodestinationsNestedInput
}


/**
 * Count Type DestinationsCountOutputType
 */

export type DestinationsCountOutputType = {
  trips_trips_end_destination_idTodestinations: number
  trips_trips_start_destination_idTodestinations: number
}

export type DestinationsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trips_trips_end_destination_idTodestinations?: boolean | DestinationsCountOutputTypeCountTrips_trips_end_destination_idTodestinationsArgs
  trips_trips_start_destination_idTodestinations?: boolean | DestinationsCountOutputTypeCountTrips_trips_start_destination_idTodestinationsArgs
}

/**
 * DestinationsCountOutputType without action
 */
export type DestinationsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DestinationsCountOutputType
   */
  select?: Prisma.DestinationsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DestinationsCountOutputType without action
 */
export type DestinationsCountOutputTypeCountTrips_trips_end_destination_idTodestinationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tripsWhereInput
}

/**
 * DestinationsCountOutputType without action
 */
export type DestinationsCountOutputTypeCountTrips_trips_start_destination_idTodestinationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tripsWhereInput
}


export type destinationsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
  trips_trips_end_destination_idTodestinations?: boolean | Prisma.destinations$trips_trips_end_destination_idTodestinationsArgs<ExtArgs>
  trips_trips_start_destination_idTodestinations?: boolean | Prisma.destinations$trips_trips_start_destination_idTodestinationsArgs<ExtArgs>
  _count?: boolean | Prisma.DestinationsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["destinations"]>

export type destinationsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
}, ExtArgs["result"]["destinations"]>

export type destinationsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
}, ExtArgs["result"]["destinations"]>

export type destinationsSelectScalar = {
  id?: boolean
  name?: boolean
  address?: boolean
}

export type destinationsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "address", ExtArgs["result"]["destinations"]>
export type destinationsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trips_trips_end_destination_idTodestinations?: boolean | Prisma.destinations$trips_trips_end_destination_idTodestinationsArgs<ExtArgs>
  trips_trips_start_destination_idTodestinations?: boolean | Prisma.destinations$trips_trips_start_destination_idTodestinationsArgs<ExtArgs>
  _count?: boolean | Prisma.DestinationsCountOutputTypeDefaultArgs<ExtArgs>
}
export type destinationsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type destinationsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $destinationsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "destinations"
  objects: {
    trips_trips_end_destination_idTodestinations: Prisma.$tripsPayload<ExtArgs>[]
    trips_trips_start_destination_idTodestinations: Prisma.$tripsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    address: string | null
  }, ExtArgs["result"]["destinations"]>
  composites: {}
}

export type destinationsGetPayload<S extends boolean | null | undefined | destinationsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$destinationsPayload, S>

export type destinationsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<destinationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DestinationsCountAggregateInputType | true
  }

export interface destinationsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['destinations'], meta: { name: 'destinations' } }
  /**
   * Find zero or one Destinations that matches the filter.
   * @param {destinationsFindUniqueArgs} args - Arguments to find a Destinations
   * @example
   * // Get one Destinations
   * const destinations = await prisma.destinations.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends destinationsFindUniqueArgs>(args: Prisma.SelectSubset<T, destinationsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__destinationsClient<runtime.Types.Result.GetResult<Prisma.$destinationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Destinations that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {destinationsFindUniqueOrThrowArgs} args - Arguments to find a Destinations
   * @example
   * // Get one Destinations
   * const destinations = await prisma.destinations.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends destinationsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, destinationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__destinationsClient<runtime.Types.Result.GetResult<Prisma.$destinationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Destinations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {destinationsFindFirstArgs} args - Arguments to find a Destinations
   * @example
   * // Get one Destinations
   * const destinations = await prisma.destinations.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends destinationsFindFirstArgs>(args?: Prisma.SelectSubset<T, destinationsFindFirstArgs<ExtArgs>>): Prisma.Prisma__destinationsClient<runtime.Types.Result.GetResult<Prisma.$destinationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Destinations that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {destinationsFindFirstOrThrowArgs} args - Arguments to find a Destinations
   * @example
   * // Get one Destinations
   * const destinations = await prisma.destinations.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends destinationsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, destinationsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__destinationsClient<runtime.Types.Result.GetResult<Prisma.$destinationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Destinations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {destinationsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Destinations
   * const destinations = await prisma.destinations.findMany()
   * 
   * // Get first 10 Destinations
   * const destinations = await prisma.destinations.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const destinationsWithIdOnly = await prisma.destinations.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends destinationsFindManyArgs>(args?: Prisma.SelectSubset<T, destinationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$destinationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Destinations.
   * @param {destinationsCreateArgs} args - Arguments to create a Destinations.
   * @example
   * // Create one Destinations
   * const Destinations = await prisma.destinations.create({
   *   data: {
   *     // ... data to create a Destinations
   *   }
   * })
   * 
   */
  create<T extends destinationsCreateArgs>(args: Prisma.SelectSubset<T, destinationsCreateArgs<ExtArgs>>): Prisma.Prisma__destinationsClient<runtime.Types.Result.GetResult<Prisma.$destinationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Destinations.
   * @param {destinationsCreateManyArgs} args - Arguments to create many Destinations.
   * @example
   * // Create many Destinations
   * const destinations = await prisma.destinations.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends destinationsCreateManyArgs>(args?: Prisma.SelectSubset<T, destinationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Destinations and returns the data saved in the database.
   * @param {destinationsCreateManyAndReturnArgs} args - Arguments to create many Destinations.
   * @example
   * // Create many Destinations
   * const destinations = await prisma.destinations.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Destinations and only return the `id`
   * const destinationsWithIdOnly = await prisma.destinations.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends destinationsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, destinationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$destinationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Destinations.
   * @param {destinationsDeleteArgs} args - Arguments to delete one Destinations.
   * @example
   * // Delete one Destinations
   * const Destinations = await prisma.destinations.delete({
   *   where: {
   *     // ... filter to delete one Destinations
   *   }
   * })
   * 
   */
  delete<T extends destinationsDeleteArgs>(args: Prisma.SelectSubset<T, destinationsDeleteArgs<ExtArgs>>): Prisma.Prisma__destinationsClient<runtime.Types.Result.GetResult<Prisma.$destinationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Destinations.
   * @param {destinationsUpdateArgs} args - Arguments to update one Destinations.
   * @example
   * // Update one Destinations
   * const destinations = await prisma.destinations.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends destinationsUpdateArgs>(args: Prisma.SelectSubset<T, destinationsUpdateArgs<ExtArgs>>): Prisma.Prisma__destinationsClient<runtime.Types.Result.GetResult<Prisma.$destinationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Destinations.
   * @param {destinationsDeleteManyArgs} args - Arguments to filter Destinations to delete.
   * @example
   * // Delete a few Destinations
   * const { count } = await prisma.destinations.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends destinationsDeleteManyArgs>(args?: Prisma.SelectSubset<T, destinationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Destinations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {destinationsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Destinations
   * const destinations = await prisma.destinations.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends destinationsUpdateManyArgs>(args: Prisma.SelectSubset<T, destinationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Destinations and returns the data updated in the database.
   * @param {destinationsUpdateManyAndReturnArgs} args - Arguments to update many Destinations.
   * @example
   * // Update many Destinations
   * const destinations = await prisma.destinations.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Destinations and only return the `id`
   * const destinationsWithIdOnly = await prisma.destinations.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends destinationsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, destinationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$destinationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Destinations.
   * @param {destinationsUpsertArgs} args - Arguments to update or create a Destinations.
   * @example
   * // Update or create a Destinations
   * const destinations = await prisma.destinations.upsert({
   *   create: {
   *     // ... data to create a Destinations
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Destinations we want to update
   *   }
   * })
   */
  upsert<T extends destinationsUpsertArgs>(args: Prisma.SelectSubset<T, destinationsUpsertArgs<ExtArgs>>): Prisma.Prisma__destinationsClient<runtime.Types.Result.GetResult<Prisma.$destinationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Destinations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {destinationsCountArgs} args - Arguments to filter Destinations to count.
   * @example
   * // Count the number of Destinations
   * const count = await prisma.destinations.count({
   *   where: {
   *     // ... the filter for the Destinations we want to count
   *   }
   * })
  **/
  count<T extends destinationsCountArgs>(
    args?: Prisma.Subset<T, destinationsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DestinationsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Destinations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DestinationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DestinationsAggregateArgs>(args: Prisma.Subset<T, DestinationsAggregateArgs>): Prisma.PrismaPromise<GetDestinationsAggregateType<T>>

  /**
   * Group by Destinations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {destinationsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends destinationsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: destinationsGroupByArgs['orderBy'] }
      : { orderBy?: destinationsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, destinationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDestinationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the destinations model
 */
readonly fields: destinationsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for destinations.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__destinationsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  trips_trips_end_destination_idTodestinations<T extends Prisma.destinations$trips_trips_end_destination_idTodestinationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.destinations$trips_trips_end_destination_idTodestinationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tripsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  trips_trips_start_destination_idTodestinations<T extends Prisma.destinations$trips_trips_start_destination_idTodestinationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.destinations$trips_trips_start_destination_idTodestinationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tripsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the destinations model
 */
export interface destinationsFieldRefs {
  readonly id: Prisma.FieldRef<"destinations", 'Int'>
  readonly name: Prisma.FieldRef<"destinations", 'String'>
  readonly address: Prisma.FieldRef<"destinations", 'String'>
}
    

// Custom InputTypes
/**
 * destinations findUnique
 */
export type destinationsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.destinationsInclude<ExtArgs> | null
  /**
   * Filter, which destinations to fetch.
   */
  where: Prisma.destinationsWhereUniqueInput
}

/**
 * destinations findUniqueOrThrow
 */
export type destinationsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.destinationsInclude<ExtArgs> | null
  /**
   * Filter, which destinations to fetch.
   */
  where: Prisma.destinationsWhereUniqueInput
}

/**
 * destinations findFirst
 */
export type destinationsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.destinationsInclude<ExtArgs> | null
  /**
   * Filter, which destinations to fetch.
   */
  where?: Prisma.destinationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of destinations to fetch.
   */
  orderBy?: Prisma.destinationsOrderByWithRelationInput | Prisma.destinationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for destinations.
   */
  cursor?: Prisma.destinationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` destinations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` destinations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of destinations.
   */
  distinct?: Prisma.DestinationsScalarFieldEnum | Prisma.DestinationsScalarFieldEnum[]
}

/**
 * destinations findFirstOrThrow
 */
export type destinationsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.destinationsInclude<ExtArgs> | null
  /**
   * Filter, which destinations to fetch.
   */
  where?: Prisma.destinationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of destinations to fetch.
   */
  orderBy?: Prisma.destinationsOrderByWithRelationInput | Prisma.destinationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for destinations.
   */
  cursor?: Prisma.destinationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` destinations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` destinations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of destinations.
   */
  distinct?: Prisma.DestinationsScalarFieldEnum | Prisma.DestinationsScalarFieldEnum[]
}

/**
 * destinations findMany
 */
export type destinationsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.destinationsInclude<ExtArgs> | null
  /**
   * Filter, which destinations to fetch.
   */
  where?: Prisma.destinationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of destinations to fetch.
   */
  orderBy?: Prisma.destinationsOrderByWithRelationInput | Prisma.destinationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing destinations.
   */
  cursor?: Prisma.destinationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` destinations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` destinations.
   */
  skip?: number
  distinct?: Prisma.DestinationsScalarFieldEnum | Prisma.DestinationsScalarFieldEnum[]
}

/**
 * destinations create
 */
export type destinationsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.destinationsInclude<ExtArgs> | null
  /**
   * The data needed to create a destinations.
   */
  data: Prisma.XOR<Prisma.destinationsCreateInput, Prisma.destinationsUncheckedCreateInput>
}

/**
 * destinations createMany
 */
export type destinationsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many destinations.
   */
  data: Prisma.destinationsCreateManyInput | Prisma.destinationsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * destinations createManyAndReturn
 */
export type destinationsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * The data used to create many destinations.
   */
  data: Prisma.destinationsCreateManyInput | Prisma.destinationsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * destinations update
 */
export type destinationsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.destinationsInclude<ExtArgs> | null
  /**
   * The data needed to update a destinations.
   */
  data: Prisma.XOR<Prisma.destinationsUpdateInput, Prisma.destinationsUncheckedUpdateInput>
  /**
   * Choose, which destinations to update.
   */
  where: Prisma.destinationsWhereUniqueInput
}

/**
 * destinations updateMany
 */
export type destinationsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update destinations.
   */
  data: Prisma.XOR<Prisma.destinationsUpdateManyMutationInput, Prisma.destinationsUncheckedUpdateManyInput>
  /**
   * Filter which destinations to update
   */
  where?: Prisma.destinationsWhereInput
  /**
   * Limit how many destinations to update.
   */
  limit?: number
}

/**
 * destinations updateManyAndReturn
 */
export type destinationsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * The data used to update destinations.
   */
  data: Prisma.XOR<Prisma.destinationsUpdateManyMutationInput, Prisma.destinationsUncheckedUpdateManyInput>
  /**
   * Filter which destinations to update
   */
  where?: Prisma.destinationsWhereInput
  /**
   * Limit how many destinations to update.
   */
  limit?: number
}

/**
 * destinations upsert
 */
export type destinationsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.destinationsInclude<ExtArgs> | null
  /**
   * The filter to search for the destinations to update in case it exists.
   */
  where: Prisma.destinationsWhereUniqueInput
  /**
   * In case the destinations found by the `where` argument doesn't exist, create a new destinations with this data.
   */
  create: Prisma.XOR<Prisma.destinationsCreateInput, Prisma.destinationsUncheckedCreateInput>
  /**
   * In case the destinations was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.destinationsUpdateInput, Prisma.destinationsUncheckedUpdateInput>
}

/**
 * destinations delete
 */
export type destinationsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.destinationsInclude<ExtArgs> | null
  /**
   * Filter which destinations to delete.
   */
  where: Prisma.destinationsWhereUniqueInput
}

/**
 * destinations deleteMany
 */
export type destinationsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which destinations to delete
   */
  where?: Prisma.destinationsWhereInput
  /**
   * Limit how many destinations to delete.
   */
  limit?: number
}

/**
 * destinations.trips_trips_end_destination_idTodestinations
 */
export type destinations$trips_trips_end_destination_idTodestinationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trips
   */
  select?: Prisma.tripsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trips
   */
  omit?: Prisma.tripsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tripsInclude<ExtArgs> | null
  where?: Prisma.tripsWhereInput
  orderBy?: Prisma.tripsOrderByWithRelationInput | Prisma.tripsOrderByWithRelationInput[]
  cursor?: Prisma.tripsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TripsScalarFieldEnum | Prisma.TripsScalarFieldEnum[]
}

/**
 * destinations.trips_trips_start_destination_idTodestinations
 */
export type destinations$trips_trips_start_destination_idTodestinationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trips
   */
  select?: Prisma.tripsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trips
   */
  omit?: Prisma.tripsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tripsInclude<ExtArgs> | null
  where?: Prisma.tripsWhereInput
  orderBy?: Prisma.tripsOrderByWithRelationInput | Prisma.tripsOrderByWithRelationInput[]
  cursor?: Prisma.tripsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TripsScalarFieldEnum | Prisma.TripsScalarFieldEnum[]
}

/**
 * destinations without action
 */
export type destinationsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the destinations
   */
  select?: Prisma.destinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the destinations
   */
  omit?: Prisma.destinationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.destinationsInclude<ExtArgs> | null
}
