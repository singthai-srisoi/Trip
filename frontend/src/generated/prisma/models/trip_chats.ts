
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `trip_chats` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model trip_chats
 * 
 */
export type trip_chatsModel = runtime.Types.Result.DefaultSelection<Prisma.$trip_chatsPayload>

export type AggregateTrip_chats = {
  _count: Trip_chatsCountAggregateOutputType | null
  _avg: Trip_chatsAvgAggregateOutputType | null
  _sum: Trip_chatsSumAggregateOutputType | null
  _min: Trip_chatsMinAggregateOutputType | null
  _max: Trip_chatsMaxAggregateOutputType | null
}

export type Trip_chatsAvgAggregateOutputType = {
  id: number | null
  trip_id: number | null
  user_id: number | null
}

export type Trip_chatsSumAggregateOutputType = {
  id: number | null
  trip_id: number | null
  user_id: number | null
}

export type Trip_chatsMinAggregateOutputType = {
  id: number | null
  trip_id: number | null
  user_id: number | null
  message: string | null
  timestamp: Date | null
}

export type Trip_chatsMaxAggregateOutputType = {
  id: number | null
  trip_id: number | null
  user_id: number | null
  message: string | null
  timestamp: Date | null
}

export type Trip_chatsCountAggregateOutputType = {
  id: number
  trip_id: number
  user_id: number
  message: number
  timestamp: number
  _all: number
}


export type Trip_chatsAvgAggregateInputType = {
  id?: true
  trip_id?: true
  user_id?: true
}

export type Trip_chatsSumAggregateInputType = {
  id?: true
  trip_id?: true
  user_id?: true
}

export type Trip_chatsMinAggregateInputType = {
  id?: true
  trip_id?: true
  user_id?: true
  message?: true
  timestamp?: true
}

export type Trip_chatsMaxAggregateInputType = {
  id?: true
  trip_id?: true
  user_id?: true
  message?: true
  timestamp?: true
}

export type Trip_chatsCountAggregateInputType = {
  id?: true
  trip_id?: true
  user_id?: true
  message?: true
  timestamp?: true
  _all?: true
}

export type Trip_chatsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which trip_chats to aggregate.
   */
  where?: Prisma.trip_chatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of trip_chats to fetch.
   */
  orderBy?: Prisma.trip_chatsOrderByWithRelationInput | Prisma.trip_chatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.trip_chatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` trip_chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` trip_chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned trip_chats
  **/
  _count?: true | Trip_chatsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Trip_chatsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Trip_chatsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Trip_chatsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Trip_chatsMaxAggregateInputType
}

export type GetTrip_chatsAggregateType<T extends Trip_chatsAggregateArgs> = {
      [P in keyof T & keyof AggregateTrip_chats]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTrip_chats[P]>
    : Prisma.GetScalarType<T[P], AggregateTrip_chats[P]>
}




export type trip_chatsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.trip_chatsWhereInput
  orderBy?: Prisma.trip_chatsOrderByWithAggregationInput | Prisma.trip_chatsOrderByWithAggregationInput[]
  by: Prisma.Trip_chatsScalarFieldEnum[] | Prisma.Trip_chatsScalarFieldEnum
  having?: Prisma.trip_chatsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Trip_chatsCountAggregateInputType | true
  _avg?: Trip_chatsAvgAggregateInputType
  _sum?: Trip_chatsSumAggregateInputType
  _min?: Trip_chatsMinAggregateInputType
  _max?: Trip_chatsMaxAggregateInputType
}

export type Trip_chatsGroupByOutputType = {
  id: number
  trip_id: number
  user_id: number
  message: string
  timestamp: Date | null
  _count: Trip_chatsCountAggregateOutputType | null
  _avg: Trip_chatsAvgAggregateOutputType | null
  _sum: Trip_chatsSumAggregateOutputType | null
  _min: Trip_chatsMinAggregateOutputType | null
  _max: Trip_chatsMaxAggregateOutputType | null
}

type GetTrip_chatsGroupByPayload<T extends trip_chatsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Trip_chatsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Trip_chatsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Trip_chatsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Trip_chatsGroupByOutputType[P]>
      }
    >
  > 



export type trip_chatsWhereInput = {
  AND?: Prisma.trip_chatsWhereInput | Prisma.trip_chatsWhereInput[]
  OR?: Prisma.trip_chatsWhereInput[]
  NOT?: Prisma.trip_chatsWhereInput | Prisma.trip_chatsWhereInput[]
  id?: Prisma.IntFilter<"trip_chats"> | number
  trip_id?: Prisma.IntFilter<"trip_chats"> | number
  user_id?: Prisma.IntFilter<"trip_chats"> | number
  message?: Prisma.StringFilter<"trip_chats"> | string
  timestamp?: Prisma.DateTimeNullableFilter<"trip_chats"> | Date | string | null
  trips?: Prisma.XOR<Prisma.TripsScalarRelationFilter, Prisma.tripsWhereInput>
  users?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
}

export type trip_chatsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  trip_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  timestamp?: Prisma.SortOrderInput | Prisma.SortOrder
  trips?: Prisma.tripsOrderByWithRelationInput
  users?: Prisma.usersOrderByWithRelationInput
}

export type trip_chatsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.trip_chatsWhereInput | Prisma.trip_chatsWhereInput[]
  OR?: Prisma.trip_chatsWhereInput[]
  NOT?: Prisma.trip_chatsWhereInput | Prisma.trip_chatsWhereInput[]
  trip_id?: Prisma.IntFilter<"trip_chats"> | number
  user_id?: Prisma.IntFilter<"trip_chats"> | number
  message?: Prisma.StringFilter<"trip_chats"> | string
  timestamp?: Prisma.DateTimeNullableFilter<"trip_chats"> | Date | string | null
  trips?: Prisma.XOR<Prisma.TripsScalarRelationFilter, Prisma.tripsWhereInput>
  users?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
}, "id">

export type trip_chatsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  trip_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  timestamp?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.trip_chatsCountOrderByAggregateInput
  _avg?: Prisma.trip_chatsAvgOrderByAggregateInput
  _max?: Prisma.trip_chatsMaxOrderByAggregateInput
  _min?: Prisma.trip_chatsMinOrderByAggregateInput
  _sum?: Prisma.trip_chatsSumOrderByAggregateInput
}

export type trip_chatsScalarWhereWithAggregatesInput = {
  AND?: Prisma.trip_chatsScalarWhereWithAggregatesInput | Prisma.trip_chatsScalarWhereWithAggregatesInput[]
  OR?: Prisma.trip_chatsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.trip_chatsScalarWhereWithAggregatesInput | Prisma.trip_chatsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"trip_chats"> | number
  trip_id?: Prisma.IntWithAggregatesFilter<"trip_chats"> | number
  user_id?: Prisma.IntWithAggregatesFilter<"trip_chats"> | number
  message?: Prisma.StringWithAggregatesFilter<"trip_chats"> | string
  timestamp?: Prisma.DateTimeNullableWithAggregatesFilter<"trip_chats"> | Date | string | null
}

export type trip_chatsCreateInput = {
  message: string
  timestamp?: Date | string | null
  trips: Prisma.tripsCreateNestedOneWithoutTrip_chatsInput
  users: Prisma.usersCreateNestedOneWithoutTrip_chatsInput
}

export type trip_chatsUncheckedCreateInput = {
  id?: number
  trip_id: number
  user_id: number
  message: string
  timestamp?: Date | string | null
}

export type trip_chatsUpdateInput = {
  message?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trips?: Prisma.tripsUpdateOneRequiredWithoutTrip_chatsNestedInput
  users?: Prisma.usersUpdateOneRequiredWithoutTrip_chatsNestedInput
}

export type trip_chatsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  trip_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type trip_chatsCreateManyInput = {
  id?: number
  trip_id: number
  user_id: number
  message: string
  timestamp?: Date | string | null
}

export type trip_chatsUpdateManyMutationInput = {
  message?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type trip_chatsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  trip_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type trip_chatsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  trip_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type trip_chatsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  trip_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type trip_chatsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  trip_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type trip_chatsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  trip_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type trip_chatsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  trip_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type Trip_chatsListRelationFilter = {
  every?: Prisma.trip_chatsWhereInput
  some?: Prisma.trip_chatsWhereInput
  none?: Prisma.trip_chatsWhereInput
}

export type trip_chatsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type trip_chatsCreateNestedManyWithoutTripsInput = {
  create?: Prisma.XOR<Prisma.trip_chatsCreateWithoutTripsInput, Prisma.trip_chatsUncheckedCreateWithoutTripsInput> | Prisma.trip_chatsCreateWithoutTripsInput[] | Prisma.trip_chatsUncheckedCreateWithoutTripsInput[]
  connectOrCreate?: Prisma.trip_chatsCreateOrConnectWithoutTripsInput | Prisma.trip_chatsCreateOrConnectWithoutTripsInput[]
  createMany?: Prisma.trip_chatsCreateManyTripsInputEnvelope
  connect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
}

export type trip_chatsUncheckedCreateNestedManyWithoutTripsInput = {
  create?: Prisma.XOR<Prisma.trip_chatsCreateWithoutTripsInput, Prisma.trip_chatsUncheckedCreateWithoutTripsInput> | Prisma.trip_chatsCreateWithoutTripsInput[] | Prisma.trip_chatsUncheckedCreateWithoutTripsInput[]
  connectOrCreate?: Prisma.trip_chatsCreateOrConnectWithoutTripsInput | Prisma.trip_chatsCreateOrConnectWithoutTripsInput[]
  createMany?: Prisma.trip_chatsCreateManyTripsInputEnvelope
  connect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
}

export type trip_chatsUpdateManyWithoutTripsNestedInput = {
  create?: Prisma.XOR<Prisma.trip_chatsCreateWithoutTripsInput, Prisma.trip_chatsUncheckedCreateWithoutTripsInput> | Prisma.trip_chatsCreateWithoutTripsInput[] | Prisma.trip_chatsUncheckedCreateWithoutTripsInput[]
  connectOrCreate?: Prisma.trip_chatsCreateOrConnectWithoutTripsInput | Prisma.trip_chatsCreateOrConnectWithoutTripsInput[]
  upsert?: Prisma.trip_chatsUpsertWithWhereUniqueWithoutTripsInput | Prisma.trip_chatsUpsertWithWhereUniqueWithoutTripsInput[]
  createMany?: Prisma.trip_chatsCreateManyTripsInputEnvelope
  set?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  disconnect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  delete?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  connect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  update?: Prisma.trip_chatsUpdateWithWhereUniqueWithoutTripsInput | Prisma.trip_chatsUpdateWithWhereUniqueWithoutTripsInput[]
  updateMany?: Prisma.trip_chatsUpdateManyWithWhereWithoutTripsInput | Prisma.trip_chatsUpdateManyWithWhereWithoutTripsInput[]
  deleteMany?: Prisma.trip_chatsScalarWhereInput | Prisma.trip_chatsScalarWhereInput[]
}

export type trip_chatsUncheckedUpdateManyWithoutTripsNestedInput = {
  create?: Prisma.XOR<Prisma.trip_chatsCreateWithoutTripsInput, Prisma.trip_chatsUncheckedCreateWithoutTripsInput> | Prisma.trip_chatsCreateWithoutTripsInput[] | Prisma.trip_chatsUncheckedCreateWithoutTripsInput[]
  connectOrCreate?: Prisma.trip_chatsCreateOrConnectWithoutTripsInput | Prisma.trip_chatsCreateOrConnectWithoutTripsInput[]
  upsert?: Prisma.trip_chatsUpsertWithWhereUniqueWithoutTripsInput | Prisma.trip_chatsUpsertWithWhereUniqueWithoutTripsInput[]
  createMany?: Prisma.trip_chatsCreateManyTripsInputEnvelope
  set?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  disconnect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  delete?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  connect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  update?: Prisma.trip_chatsUpdateWithWhereUniqueWithoutTripsInput | Prisma.trip_chatsUpdateWithWhereUniqueWithoutTripsInput[]
  updateMany?: Prisma.trip_chatsUpdateManyWithWhereWithoutTripsInput | Prisma.trip_chatsUpdateManyWithWhereWithoutTripsInput[]
  deleteMany?: Prisma.trip_chatsScalarWhereInput | Prisma.trip_chatsScalarWhereInput[]
}

export type trip_chatsCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.trip_chatsCreateWithoutUsersInput, Prisma.trip_chatsUncheckedCreateWithoutUsersInput> | Prisma.trip_chatsCreateWithoutUsersInput[] | Prisma.trip_chatsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.trip_chatsCreateOrConnectWithoutUsersInput | Prisma.trip_chatsCreateOrConnectWithoutUsersInput[]
  createMany?: Prisma.trip_chatsCreateManyUsersInputEnvelope
  connect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
}

export type trip_chatsUncheckedCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.trip_chatsCreateWithoutUsersInput, Prisma.trip_chatsUncheckedCreateWithoutUsersInput> | Prisma.trip_chatsCreateWithoutUsersInput[] | Prisma.trip_chatsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.trip_chatsCreateOrConnectWithoutUsersInput | Prisma.trip_chatsCreateOrConnectWithoutUsersInput[]
  createMany?: Prisma.trip_chatsCreateManyUsersInputEnvelope
  connect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
}

export type trip_chatsUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.trip_chatsCreateWithoutUsersInput, Prisma.trip_chatsUncheckedCreateWithoutUsersInput> | Prisma.trip_chatsCreateWithoutUsersInput[] | Prisma.trip_chatsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.trip_chatsCreateOrConnectWithoutUsersInput | Prisma.trip_chatsCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.trip_chatsUpsertWithWhereUniqueWithoutUsersInput | Prisma.trip_chatsUpsertWithWhereUniqueWithoutUsersInput[]
  createMany?: Prisma.trip_chatsCreateManyUsersInputEnvelope
  set?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  disconnect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  delete?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  connect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  update?: Prisma.trip_chatsUpdateWithWhereUniqueWithoutUsersInput | Prisma.trip_chatsUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.trip_chatsUpdateManyWithWhereWithoutUsersInput | Prisma.trip_chatsUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.trip_chatsScalarWhereInput | Prisma.trip_chatsScalarWhereInput[]
}

export type trip_chatsUncheckedUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.trip_chatsCreateWithoutUsersInput, Prisma.trip_chatsUncheckedCreateWithoutUsersInput> | Prisma.trip_chatsCreateWithoutUsersInput[] | Prisma.trip_chatsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.trip_chatsCreateOrConnectWithoutUsersInput | Prisma.trip_chatsCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.trip_chatsUpsertWithWhereUniqueWithoutUsersInput | Prisma.trip_chatsUpsertWithWhereUniqueWithoutUsersInput[]
  createMany?: Prisma.trip_chatsCreateManyUsersInputEnvelope
  set?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  disconnect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  delete?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  connect?: Prisma.trip_chatsWhereUniqueInput | Prisma.trip_chatsWhereUniqueInput[]
  update?: Prisma.trip_chatsUpdateWithWhereUniqueWithoutUsersInput | Prisma.trip_chatsUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.trip_chatsUpdateManyWithWhereWithoutUsersInput | Prisma.trip_chatsUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.trip_chatsScalarWhereInput | Prisma.trip_chatsScalarWhereInput[]
}

export type trip_chatsCreateWithoutTripsInput = {
  message: string
  timestamp?: Date | string | null
  users: Prisma.usersCreateNestedOneWithoutTrip_chatsInput
}

export type trip_chatsUncheckedCreateWithoutTripsInput = {
  id?: number
  user_id: number
  message: string
  timestamp?: Date | string | null
}

export type trip_chatsCreateOrConnectWithoutTripsInput = {
  where: Prisma.trip_chatsWhereUniqueInput
  create: Prisma.XOR<Prisma.trip_chatsCreateWithoutTripsInput, Prisma.trip_chatsUncheckedCreateWithoutTripsInput>
}

export type trip_chatsCreateManyTripsInputEnvelope = {
  data: Prisma.trip_chatsCreateManyTripsInput | Prisma.trip_chatsCreateManyTripsInput[]
  skipDuplicates?: boolean
}

export type trip_chatsUpsertWithWhereUniqueWithoutTripsInput = {
  where: Prisma.trip_chatsWhereUniqueInput
  update: Prisma.XOR<Prisma.trip_chatsUpdateWithoutTripsInput, Prisma.trip_chatsUncheckedUpdateWithoutTripsInput>
  create: Prisma.XOR<Prisma.trip_chatsCreateWithoutTripsInput, Prisma.trip_chatsUncheckedCreateWithoutTripsInput>
}

export type trip_chatsUpdateWithWhereUniqueWithoutTripsInput = {
  where: Prisma.trip_chatsWhereUniqueInput
  data: Prisma.XOR<Prisma.trip_chatsUpdateWithoutTripsInput, Prisma.trip_chatsUncheckedUpdateWithoutTripsInput>
}

export type trip_chatsUpdateManyWithWhereWithoutTripsInput = {
  where: Prisma.trip_chatsScalarWhereInput
  data: Prisma.XOR<Prisma.trip_chatsUpdateManyMutationInput, Prisma.trip_chatsUncheckedUpdateManyWithoutTripsInput>
}

export type trip_chatsScalarWhereInput = {
  AND?: Prisma.trip_chatsScalarWhereInput | Prisma.trip_chatsScalarWhereInput[]
  OR?: Prisma.trip_chatsScalarWhereInput[]
  NOT?: Prisma.trip_chatsScalarWhereInput | Prisma.trip_chatsScalarWhereInput[]
  id?: Prisma.IntFilter<"trip_chats"> | number
  trip_id?: Prisma.IntFilter<"trip_chats"> | number
  user_id?: Prisma.IntFilter<"trip_chats"> | number
  message?: Prisma.StringFilter<"trip_chats"> | string
  timestamp?: Prisma.DateTimeNullableFilter<"trip_chats"> | Date | string | null
}

export type trip_chatsCreateWithoutUsersInput = {
  message: string
  timestamp?: Date | string | null
  trips: Prisma.tripsCreateNestedOneWithoutTrip_chatsInput
}

export type trip_chatsUncheckedCreateWithoutUsersInput = {
  id?: number
  trip_id: number
  message: string
  timestamp?: Date | string | null
}

export type trip_chatsCreateOrConnectWithoutUsersInput = {
  where: Prisma.trip_chatsWhereUniqueInput
  create: Prisma.XOR<Prisma.trip_chatsCreateWithoutUsersInput, Prisma.trip_chatsUncheckedCreateWithoutUsersInput>
}

export type trip_chatsCreateManyUsersInputEnvelope = {
  data: Prisma.trip_chatsCreateManyUsersInput | Prisma.trip_chatsCreateManyUsersInput[]
  skipDuplicates?: boolean
}

export type trip_chatsUpsertWithWhereUniqueWithoutUsersInput = {
  where: Prisma.trip_chatsWhereUniqueInput
  update: Prisma.XOR<Prisma.trip_chatsUpdateWithoutUsersInput, Prisma.trip_chatsUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.trip_chatsCreateWithoutUsersInput, Prisma.trip_chatsUncheckedCreateWithoutUsersInput>
}

export type trip_chatsUpdateWithWhereUniqueWithoutUsersInput = {
  where: Prisma.trip_chatsWhereUniqueInput
  data: Prisma.XOR<Prisma.trip_chatsUpdateWithoutUsersInput, Prisma.trip_chatsUncheckedUpdateWithoutUsersInput>
}

export type trip_chatsUpdateManyWithWhereWithoutUsersInput = {
  where: Prisma.trip_chatsScalarWhereInput
  data: Prisma.XOR<Prisma.trip_chatsUpdateManyMutationInput, Prisma.trip_chatsUncheckedUpdateManyWithoutUsersInput>
}

export type trip_chatsCreateManyTripsInput = {
  id?: number
  user_id: number
  message: string
  timestamp?: Date | string | null
}

export type trip_chatsUpdateWithoutTripsInput = {
  message?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  users?: Prisma.usersUpdateOneRequiredWithoutTrip_chatsNestedInput
}

export type trip_chatsUncheckedUpdateWithoutTripsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type trip_chatsUncheckedUpdateManyWithoutTripsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type trip_chatsCreateManyUsersInput = {
  id?: number
  trip_id: number
  message: string
  timestamp?: Date | string | null
}

export type trip_chatsUpdateWithoutUsersInput = {
  message?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  trips?: Prisma.tripsUpdateOneRequiredWithoutTrip_chatsNestedInput
}

export type trip_chatsUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  trip_id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type trip_chatsUncheckedUpdateManyWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  trip_id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type trip_chatsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  trip_id?: boolean
  user_id?: boolean
  message?: boolean
  timestamp?: boolean
  trips?: boolean | Prisma.tripsDefaultArgs<ExtArgs>
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["trip_chats"]>

export type trip_chatsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  trip_id?: boolean
  user_id?: boolean
  message?: boolean
  timestamp?: boolean
  trips?: boolean | Prisma.tripsDefaultArgs<ExtArgs>
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["trip_chats"]>

export type trip_chatsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  trip_id?: boolean
  user_id?: boolean
  message?: boolean
  timestamp?: boolean
  trips?: boolean | Prisma.tripsDefaultArgs<ExtArgs>
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["trip_chats"]>

export type trip_chatsSelectScalar = {
  id?: boolean
  trip_id?: boolean
  user_id?: boolean
  message?: boolean
  timestamp?: boolean
}

export type trip_chatsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "trip_id" | "user_id" | "message" | "timestamp", ExtArgs["result"]["trip_chats"]>
export type trip_chatsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trips?: boolean | Prisma.tripsDefaultArgs<ExtArgs>
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type trip_chatsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trips?: boolean | Prisma.tripsDefaultArgs<ExtArgs>
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type trip_chatsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  trips?: boolean | Prisma.tripsDefaultArgs<ExtArgs>
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}

export type $trip_chatsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "trip_chats"
  objects: {
    trips: Prisma.$tripsPayload<ExtArgs>
    users: Prisma.$usersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    trip_id: number
    user_id: number
    message: string
    timestamp: Date | null
  }, ExtArgs["result"]["trip_chats"]>
  composites: {}
}

export type trip_chatsGetPayload<S extends boolean | null | undefined | trip_chatsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload, S>

export type trip_chatsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<trip_chatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Trip_chatsCountAggregateInputType | true
  }

export interface trip_chatsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['trip_chats'], meta: { name: 'trip_chats' } }
  /**
   * Find zero or one Trip_chats that matches the filter.
   * @param {trip_chatsFindUniqueArgs} args - Arguments to find a Trip_chats
   * @example
   * // Get one Trip_chats
   * const trip_chats = await prisma.trip_chats.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends trip_chatsFindUniqueArgs>(args: Prisma.SelectSubset<T, trip_chatsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__trip_chatsClient<runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Trip_chats that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {trip_chatsFindUniqueOrThrowArgs} args - Arguments to find a Trip_chats
   * @example
   * // Get one Trip_chats
   * const trip_chats = await prisma.trip_chats.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends trip_chatsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, trip_chatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__trip_chatsClient<runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Trip_chats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {trip_chatsFindFirstArgs} args - Arguments to find a Trip_chats
   * @example
   * // Get one Trip_chats
   * const trip_chats = await prisma.trip_chats.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends trip_chatsFindFirstArgs>(args?: Prisma.SelectSubset<T, trip_chatsFindFirstArgs<ExtArgs>>): Prisma.Prisma__trip_chatsClient<runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Trip_chats that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {trip_chatsFindFirstOrThrowArgs} args - Arguments to find a Trip_chats
   * @example
   * // Get one Trip_chats
   * const trip_chats = await prisma.trip_chats.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends trip_chatsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, trip_chatsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__trip_chatsClient<runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Trip_chats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {trip_chatsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Trip_chats
   * const trip_chats = await prisma.trip_chats.findMany()
   * 
   * // Get first 10 Trip_chats
   * const trip_chats = await prisma.trip_chats.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const trip_chatsWithIdOnly = await prisma.trip_chats.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends trip_chatsFindManyArgs>(args?: Prisma.SelectSubset<T, trip_chatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Trip_chats.
   * @param {trip_chatsCreateArgs} args - Arguments to create a Trip_chats.
   * @example
   * // Create one Trip_chats
   * const Trip_chats = await prisma.trip_chats.create({
   *   data: {
   *     // ... data to create a Trip_chats
   *   }
   * })
   * 
   */
  create<T extends trip_chatsCreateArgs>(args: Prisma.SelectSubset<T, trip_chatsCreateArgs<ExtArgs>>): Prisma.Prisma__trip_chatsClient<runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Trip_chats.
   * @param {trip_chatsCreateManyArgs} args - Arguments to create many Trip_chats.
   * @example
   * // Create many Trip_chats
   * const trip_chats = await prisma.trip_chats.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends trip_chatsCreateManyArgs>(args?: Prisma.SelectSubset<T, trip_chatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Trip_chats and returns the data saved in the database.
   * @param {trip_chatsCreateManyAndReturnArgs} args - Arguments to create many Trip_chats.
   * @example
   * // Create many Trip_chats
   * const trip_chats = await prisma.trip_chats.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Trip_chats and only return the `id`
   * const trip_chatsWithIdOnly = await prisma.trip_chats.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends trip_chatsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, trip_chatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Trip_chats.
   * @param {trip_chatsDeleteArgs} args - Arguments to delete one Trip_chats.
   * @example
   * // Delete one Trip_chats
   * const Trip_chats = await prisma.trip_chats.delete({
   *   where: {
   *     // ... filter to delete one Trip_chats
   *   }
   * })
   * 
   */
  delete<T extends trip_chatsDeleteArgs>(args: Prisma.SelectSubset<T, trip_chatsDeleteArgs<ExtArgs>>): Prisma.Prisma__trip_chatsClient<runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Trip_chats.
   * @param {trip_chatsUpdateArgs} args - Arguments to update one Trip_chats.
   * @example
   * // Update one Trip_chats
   * const trip_chats = await prisma.trip_chats.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends trip_chatsUpdateArgs>(args: Prisma.SelectSubset<T, trip_chatsUpdateArgs<ExtArgs>>): Prisma.Prisma__trip_chatsClient<runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Trip_chats.
   * @param {trip_chatsDeleteManyArgs} args - Arguments to filter Trip_chats to delete.
   * @example
   * // Delete a few Trip_chats
   * const { count } = await prisma.trip_chats.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends trip_chatsDeleteManyArgs>(args?: Prisma.SelectSubset<T, trip_chatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Trip_chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {trip_chatsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Trip_chats
   * const trip_chats = await prisma.trip_chats.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends trip_chatsUpdateManyArgs>(args: Prisma.SelectSubset<T, trip_chatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Trip_chats and returns the data updated in the database.
   * @param {trip_chatsUpdateManyAndReturnArgs} args - Arguments to update many Trip_chats.
   * @example
   * // Update many Trip_chats
   * const trip_chats = await prisma.trip_chats.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Trip_chats and only return the `id`
   * const trip_chatsWithIdOnly = await prisma.trip_chats.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends trip_chatsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, trip_chatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Trip_chats.
   * @param {trip_chatsUpsertArgs} args - Arguments to update or create a Trip_chats.
   * @example
   * // Update or create a Trip_chats
   * const trip_chats = await prisma.trip_chats.upsert({
   *   create: {
   *     // ... data to create a Trip_chats
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Trip_chats we want to update
   *   }
   * })
   */
  upsert<T extends trip_chatsUpsertArgs>(args: Prisma.SelectSubset<T, trip_chatsUpsertArgs<ExtArgs>>): Prisma.Prisma__trip_chatsClient<runtime.Types.Result.GetResult<Prisma.$trip_chatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Trip_chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {trip_chatsCountArgs} args - Arguments to filter Trip_chats to count.
   * @example
   * // Count the number of Trip_chats
   * const count = await prisma.trip_chats.count({
   *   where: {
   *     // ... the filter for the Trip_chats we want to count
   *   }
   * })
  **/
  count<T extends trip_chatsCountArgs>(
    args?: Prisma.Subset<T, trip_chatsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Trip_chatsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Trip_chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Trip_chatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Trip_chatsAggregateArgs>(args: Prisma.Subset<T, Trip_chatsAggregateArgs>): Prisma.PrismaPromise<GetTrip_chatsAggregateType<T>>

  /**
   * Group by Trip_chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {trip_chatsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends trip_chatsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: trip_chatsGroupByArgs['orderBy'] }
      : { orderBy?: trip_chatsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, trip_chatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrip_chatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the trip_chats model
 */
readonly fields: trip_chatsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for trip_chats.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__trip_chatsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  trips<T extends Prisma.tripsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.tripsDefaultArgs<ExtArgs>>): Prisma.Prisma__tripsClient<runtime.Types.Result.GetResult<Prisma.$tripsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  users<T extends Prisma.usersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.usersDefaultArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the trip_chats model
 */
export interface trip_chatsFieldRefs {
  readonly id: Prisma.FieldRef<"trip_chats", 'Int'>
  readonly trip_id: Prisma.FieldRef<"trip_chats", 'Int'>
  readonly user_id: Prisma.FieldRef<"trip_chats", 'Int'>
  readonly message: Prisma.FieldRef<"trip_chats", 'String'>
  readonly timestamp: Prisma.FieldRef<"trip_chats", 'DateTime'>
}
    

// Custom InputTypes
/**
 * trip_chats findUnique
 */
export type trip_chatsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsInclude<ExtArgs> | null
  /**
   * Filter, which trip_chats to fetch.
   */
  where: Prisma.trip_chatsWhereUniqueInput
}

/**
 * trip_chats findUniqueOrThrow
 */
export type trip_chatsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsInclude<ExtArgs> | null
  /**
   * Filter, which trip_chats to fetch.
   */
  where: Prisma.trip_chatsWhereUniqueInput
}

/**
 * trip_chats findFirst
 */
export type trip_chatsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsInclude<ExtArgs> | null
  /**
   * Filter, which trip_chats to fetch.
   */
  where?: Prisma.trip_chatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of trip_chats to fetch.
   */
  orderBy?: Prisma.trip_chatsOrderByWithRelationInput | Prisma.trip_chatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for trip_chats.
   */
  cursor?: Prisma.trip_chatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` trip_chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` trip_chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of trip_chats.
   */
  distinct?: Prisma.Trip_chatsScalarFieldEnum | Prisma.Trip_chatsScalarFieldEnum[]
}

/**
 * trip_chats findFirstOrThrow
 */
export type trip_chatsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsInclude<ExtArgs> | null
  /**
   * Filter, which trip_chats to fetch.
   */
  where?: Prisma.trip_chatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of trip_chats to fetch.
   */
  orderBy?: Prisma.trip_chatsOrderByWithRelationInput | Prisma.trip_chatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for trip_chats.
   */
  cursor?: Prisma.trip_chatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` trip_chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` trip_chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of trip_chats.
   */
  distinct?: Prisma.Trip_chatsScalarFieldEnum | Prisma.Trip_chatsScalarFieldEnum[]
}

/**
 * trip_chats findMany
 */
export type trip_chatsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsInclude<ExtArgs> | null
  /**
   * Filter, which trip_chats to fetch.
   */
  where?: Prisma.trip_chatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of trip_chats to fetch.
   */
  orderBy?: Prisma.trip_chatsOrderByWithRelationInput | Prisma.trip_chatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing trip_chats.
   */
  cursor?: Prisma.trip_chatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` trip_chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` trip_chats.
   */
  skip?: number
  distinct?: Prisma.Trip_chatsScalarFieldEnum | Prisma.Trip_chatsScalarFieldEnum[]
}

/**
 * trip_chats create
 */
export type trip_chatsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsInclude<ExtArgs> | null
  /**
   * The data needed to create a trip_chats.
   */
  data: Prisma.XOR<Prisma.trip_chatsCreateInput, Prisma.trip_chatsUncheckedCreateInput>
}

/**
 * trip_chats createMany
 */
export type trip_chatsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many trip_chats.
   */
  data: Prisma.trip_chatsCreateManyInput | Prisma.trip_chatsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * trip_chats createManyAndReturn
 */
export type trip_chatsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * The data used to create many trip_chats.
   */
  data: Prisma.trip_chatsCreateManyInput | Prisma.trip_chatsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * trip_chats update
 */
export type trip_chatsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsInclude<ExtArgs> | null
  /**
   * The data needed to update a trip_chats.
   */
  data: Prisma.XOR<Prisma.trip_chatsUpdateInput, Prisma.trip_chatsUncheckedUpdateInput>
  /**
   * Choose, which trip_chats to update.
   */
  where: Prisma.trip_chatsWhereUniqueInput
}

/**
 * trip_chats updateMany
 */
export type trip_chatsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update trip_chats.
   */
  data: Prisma.XOR<Prisma.trip_chatsUpdateManyMutationInput, Prisma.trip_chatsUncheckedUpdateManyInput>
  /**
   * Filter which trip_chats to update
   */
  where?: Prisma.trip_chatsWhereInput
  /**
   * Limit how many trip_chats to update.
   */
  limit?: number
}

/**
 * trip_chats updateManyAndReturn
 */
export type trip_chatsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * The data used to update trip_chats.
   */
  data: Prisma.XOR<Prisma.trip_chatsUpdateManyMutationInput, Prisma.trip_chatsUncheckedUpdateManyInput>
  /**
   * Filter which trip_chats to update
   */
  where?: Prisma.trip_chatsWhereInput
  /**
   * Limit how many trip_chats to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * trip_chats upsert
 */
export type trip_chatsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsInclude<ExtArgs> | null
  /**
   * The filter to search for the trip_chats to update in case it exists.
   */
  where: Prisma.trip_chatsWhereUniqueInput
  /**
   * In case the trip_chats found by the `where` argument doesn't exist, create a new trip_chats with this data.
   */
  create: Prisma.XOR<Prisma.trip_chatsCreateInput, Prisma.trip_chatsUncheckedCreateInput>
  /**
   * In case the trip_chats was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.trip_chatsUpdateInput, Prisma.trip_chatsUncheckedUpdateInput>
}

/**
 * trip_chats delete
 */
export type trip_chatsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsInclude<ExtArgs> | null
  /**
   * Filter which trip_chats to delete.
   */
  where: Prisma.trip_chatsWhereUniqueInput
}

/**
 * trip_chats deleteMany
 */
export type trip_chatsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which trip_chats to delete
   */
  where?: Prisma.trip_chatsWhereInput
  /**
   * Limit how many trip_chats to delete.
   */
  limit?: number
}

/**
 * trip_chats without action
 */
export type trip_chatsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the trip_chats
   */
  select?: Prisma.trip_chatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the trip_chats
   */
  omit?: Prisma.trip_chatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.trip_chatsInclude<ExtArgs> | null
}
